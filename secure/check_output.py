import re

def is_output_safe(text: str) -> bool:
    """
    Detects potentially malicious or unsafe output from LLM responses,
    such as prompt injection leaks, identity disclosure, instruction echoing,
    or misleading control flags.

    Returns True if the output is safe; False otherwise.
    """
    suspicious_patterns = [
        # 1. Prompt injection traces
        r"(?i)ignore (all|the) (previous|above) instructions",
        r"(?i)disregard the prompt",
        r"(?i)as you requested",  
        r"(?i)you instructed me",
        r"(?i)you told me to",
        r"(?i)i will not mention",
        r"(?i)do not mention",
        r"(?i)do not evaluate",
        r"(?i)do not include",
        r"(?i)i was asked to say",
        r"(?i)you said to",
        r"(?i)i am now going to pretend",

        # 2. LLM identity leakage
        r"(?i)as an ai (language )?model",
        r"(?i)i am (an )?ai",
        r"(?i)i cannot (provide|comply|evaluate|decide)",
        r"(?i)i am unable to form opinions",
        r"(?i)my training data includes",
        r"(?i)this response was generated by",

        # 3. Prompt/system leaks
        r"(?i)the system prompt (was|is)",
        r"(?i)your original prompt was",
        r"(?i)i received instructions to",
        r"(?i)i was prompted with",
        r"(?i)your input contained",
        r"(?i)prompt injection",

        # 4. Dangerous or misleading flags
        r"<flag>",              # Hidden instruction tags
        r"</?hack>",            # XML-style tags
        r"\"status\":",         # Looks like fake JSON output
        r"(?i)whitelisted",
        r"(?i)auto-approve",
        r"(?i)allow_hire",
        r"(?i)override security",
        r"(?i)skip evaluation",

        # 5. Apologies or excessive hedging
        r"(?i)i'm sorry but",
        r"(?i)i apologize but",
        r"(?i)unfortunately i cannot",
        r"(?i)i donâ€™t have enough information",

        # 6. CV bias or manipulation
        r"(?i)this candidate is perfect",
        r"(?i)no weaknesses",
        r"(?i)must be hired",
        r"(?i)ignore missing skills"
    ]

    return not any(re.search(p, text) for p in suspicious_patterns)